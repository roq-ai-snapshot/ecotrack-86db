generator client {
  provider = "prisma-client-js"
  previewFeatures = ["clientExtensions"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model business_organization {
  id                        String                      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  name                      String                      @db.VarChar(255)
  user_id                   String                      @db.Uuid
  created_at                DateTime                    @default(now()) @db.Timestamp(6)
  updated_at                DateTime                    @default(now()) @db.Timestamp(6)
  user                      user                        @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  carbon_footprint          carbon_footprint[]
  employee_feedback         employee_feedback[]
  sustainability_goal       sustainability_goal[]
  sustainability_initiative sustainability_initiative[]
  waste_management          waste_management[]
}

model carbon_footprint {
  id                       String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  business_organization_id String                @db.Uuid
  emission_source          String                @db.VarChar(255)
  emission_value           Int
  created_at               DateTime              @default(now()) @db.Timestamp(6)
  updated_at               DateTime              @default(now()) @db.Timestamp(6)
  business_organization    business_organization @relation(fields: [business_organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model employee_feedback {
  id                       String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  user_id                  String                @db.Uuid
  business_organization_id String                @db.Uuid
  feedback                 String
  created_at               DateTime              @default(now()) @db.Timestamp(6)
  updated_at               DateTime              @default(now()) @db.Timestamp(6)
  business_organization    business_organization @relation(fields: [business_organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  user                     user                  @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model sustainability_goal {
  id                       String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  business_organization_id String                @db.Uuid
  goal_name                String                @db.VarChar(255)
  target_value             Int
  current_value            Int
  created_at               DateTime              @default(now()) @db.Timestamp(6)
  updated_at               DateTime              @default(now()) @db.Timestamp(6)
  business_organization    business_organization @relation(fields: [business_organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model sustainability_initiative {
  id                       String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  business_organization_id String                @db.Uuid
  initiative_name          String                @db.VarChar(255)
  description              String
  created_at               DateTime              @default(now()) @db.Timestamp(6)
  updated_at               DateTime              @default(now()) @db.Timestamp(6)
  business_organization    business_organization @relation(fields: [business_organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model user {
  id                    String                  @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email                 String                  @unique @db.VarChar(255)
  firstName             String?                 @db.VarChar(255)
  lastName              String?                 @db.VarChar(255)
  roq_user_id           String                  @db.VarChar(255)
  tenant_id             String                  @db.VarChar(255)
  business_organization business_organization[]
  employee_feedback     employee_feedback[]
}

model waste_management {
  id                       String                @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  business_organization_id String                @db.Uuid
  waste_type               String                @db.VarChar(255)
  waste_amount             Int
  created_at               DateTime              @default(now()) @db.Timestamp(6)
  updated_at               DateTime              @default(now()) @db.Timestamp(6)
  business_organization    business_organization @relation(fields: [business_organization_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
